{"version":3,"names":[],"mappings":"","sources":["controllers/fm-single-fund-controller/fm-single-fund-controller.js"],"sourcesContent":["(function () {\r\n  'use strict';\r\n\r\n  // Setup routing.\r\n  angular.module('fm').config(['$stateProvider', function ($stateProvider) {\r\n\r\n    $stateProvider\r\n      .state('fund', {\r\n        url: '/fund-overwiew/fund/{id}',\r\n        controller: 'FmSingleFundCtrl',\r\n        controllerAs: 'fmSingleFund',\r\n        templateUrl: 'views/fm-single-fund-view.html',\r\n        resolve: {\r\n          $title: function () {\r\n            return 'Fond';\r\n          },\r\n          singleFundData: function (fmFundDataService, $stateParams) {\r\n            return fmFundDataService.getFundById($stateParams.id);\r\n          }\r\n        }\r\n      });\r\n\r\n  }]);\r\n\r\n  // Register controller.\r\n  angular.module('fm').controller('FmSingleFundCtrl', ['singleFundData', 'fmFundDataService', 'fmChartDefaults', '$timeout', 'fmUtilityFunctions', FmSingleFundCtrl]);\r\n\r\n  // Define controller-function.\r\n  function FmSingleFundCtrl(singleFundData, fmFundDataService, fmChartDefaults, $timeout, fmUtilityFunctions) {\r\n\r\n    /* jshint validthis: true */\r\n    var vm = this;\r\n    var defaultLineOptions = fmChartDefaults.getLineOptions();\r\n    var defaultPieOptions = fmChartDefaults.getPieOptions();\r\n    var utils = fmUtilityFunctions;\r\n\r\n    var chartCache = undefined;\r\n    vm.chartComplete = false;\r\n    vm.fund = singleFundData.value[0];\r\n    vm.getNumber = fmUtilityFunctions.intToArray;\r\n\r\n    fmFundDataService.getFunds().then(function (data) {\r\n      vm.fundList = data.value;\r\n    });\r\n\r\n    vm.addSeries = function (isin, name) {\r\n      \r\n      //if (chartCache === undefined) {\r\n\r\n        fmFundDataService.getNavHistory(isin).then(function (data) {\r\n          var navHistory = _.sortBy(data, function (val) { return val.RateDate; });\r\n          var seriesData = [];\r\n          var intitialValue = navHistory[0].Rate;\r\n\r\n          for (var i = 0; i < navHistory.length; i++) {\r\n            seriesData.push([\r\n              (new Date(navHistory[i].RateDate).getTime()),\r\n              100 * (navHistory[i].Rate - intitialValue) / intitialValue\r\n            ]);\r\n          }\r\n\r\n          var newSeries = {\r\n            name: name,\r\n            data: seriesData\r\n          };\r\n\r\n          chartCache = newSeries;\r\n\r\n          if (vm.chartConfig.series.length > 2) {\r\n            vm.chartConfig.series.pop();\r\n            vm.chartConfig.series.pop();\r\n          }\r\n\r\n          vm.chartConfig.series.push(newSeries);\r\n          vm.chartComplete = true;\r\n        });\r\n\r\n        //fmFundDataService.getFundByIsin(vm.fund.Isin).then(function (data) {\r\n        //  var navHistory = data.value[0].NavHistory.reverse();\r\n        //  var series = [];\r\n        //  var intitialValue = navHistory[0].Rate;\r\n\r\n        //  for (var i = 0; i < navHistory.length; i++) {\r\n        //    series.push([\r\n        //      (new Date(navHistory[i].RateDate).getTime()),\r\n        //      100 * (navHistory[i].Rate - intitialValue) / intitialValue\r\n        //    ]);\r\n        //  }\r\n\r\n        //  chartCache = series;\r\n        //  vm.chartConfig.series[0].data = chartCache;\r\n        //  vm.chartComplete = true;\r\n        //});\r\n\r\n      //} else {\r\n      //  vm.chartConfig.series[0] = chartCache;\r\n      //}\r\n    }\r\n\r\n\r\n    vm.chartConfig = {\r\n      options: defaultLineOptions,\r\n      series: [],\r\n      title: {\r\n        text: '',\r\n        style: {\r\n          display: 'none'\r\n        }\r\n      },\r\n      subtitle: {\r\n        text: '',\r\n        style: {\r\n          display: 'none'\r\n        }\r\n      },\r\n      loading: false,\r\n      xAxis: {\r\n        title: {\r\n          text: '',\r\n          style: {\r\n            display: 'none'\r\n          }\r\n        }\r\n      },\r\n      func: function(chart) {\r\n        $timeout(function() {\r\n          chart.reflow();\r\n        }, 0);\r\n      },\r\n      useHighStocks: true,\r\n    };\r\n\r\n\r\n\r\n    var pieData = [];\r\n\r\n    for (var j = 0; j < vm.fund.CompanyHoldings.length; j++) {\r\n\r\n\r\n      pieData.push({\r\n        name: vm.fund.CompanyHoldings[j].CompnyName,\r\n        y: vm.fund.CompanyHoldings[j].HoldingValue * 100\r\n      });\r\n    }\r\n\r\n    function initSlider() {\r\n      var owl = $('.owl-carousel'),\r\n          options = {\r\n            items: 1,\r\n            loop: true,\r\n            margin: 10,\r\n            autoplay: true,\r\n            autoplayTimeout: 3000,\r\n            autoplayHoverPause: true\r\n          };\r\n\r\n      owl.owlCarousel(options);\r\n      console.log(owl);\r\n    }\r\n\r\n    $timeout(initSlider, 0);\r\n\r\n    //defaultPieOptions.chart.events = {\r\n    //  load: function () {\r\n\r\n    //    var chart = this;\r\n    //    console.log(chart);\r\n    //  }\r\n    //};\r\n\r\n    vm.pieChartConfig = {\r\n\r\n      options: defaultPieOptions,\r\n\r\n      series: [{\r\n        name: 'Holdings',\r\n        colorByPoint: true,\r\n        data: pieData\r\n      }],\r\n\r\n      title: {\r\n        text: '',\r\n        style: {\r\n          display: 'none'\r\n        }\r\n      },\r\n\r\n      subtitle: {\r\n        text: '',\r\n        style: {\r\n          display: 'none'\r\n        }\r\n      },\r\n\r\n      loading: false,\r\n\r\n      xAxis: {\r\n        title: {\r\n          text: '',\r\n          style: {\r\n            display: 'none'\r\n          }\r\n        }\r\n      },\r\n\r\n      func: function (chart) {     \r\n        $timeout(function () {\r\n          chart.reflow();\r\n        }, 0);\r\n\r\n      },\r\n\r\n      useHighStocks: false,\r\n\r\n    };\r\n\r\n    //console.log(defaultPieOptions.getHighcharts().colors);\r\n\r\n\r\n  }\r\n})();\r\n"],"file":"controllers/fm-single-fund-controller/fm-single-fund-controller.js","sourceRoot":"/source/"}